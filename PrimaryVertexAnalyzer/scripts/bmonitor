#!/usr/bin/env python
"""
script to monitor and manage batch jobs
(supported batch systems: HTCondor, SLURM)
"""
import argparse
import os
import math
import glob

from usercode.PrimaryVertexAnalyzer.utils.common import *

def monitor_HTCondor(options, log=''):
  # input directories
  INPUT_DIRS = []
  for i_opt in options.input_dirs:
    if not os.path.isdir(i_opt):
      if options.verbosity > 0: WARNING(log+'input argument is not a valid directory (will be ignored): '+i_opt)
      continue
    INPUT_DIRS += [os.path.abspath(i_opt)]
  INPUT_DIRS = list(set(INPUT_DIRS))

  if len(INPUT_DIRS) == 0:
    return True

  # batch system
  BATCH_RESUB_EXE = 'condor_submit'

  ADD_OPTIONS = []
  if options.resubmit:
    if which(BATCH_RESUB_EXE, permissive=True) is None:
      WARNING(log+'executable for batch-job submission not found (monitoring stopped): '+BATCH_RESUB_EXE)
      return False

    if options.runtime is not None:
      ADD_OPTIONS += ['-append "+RequestRuntime = '+str(options.runtime)+'"']
    if options.memory is not None:
      ADD_OPTIONS += ['-append "RequestMemory = '+str(options.memory)+'"']
    if options.jobflavour is not None:
      ADD_OPTIONS += ['-append \'+JobFlavour = "'+str(options.jobflavour)+'"\'']

    if len(ADD_OPTIONS) > 0:
      print ' > additional options to "'+BATCH_RESUB_EXE+'":', str(ADD_OPTIONS)

  # release jobs on hold
  if options.release:
    EXE('condor_release '+os.environ['USER'], suspend=False, verbose=options.verbosity > 0, dry_run=options.dry_run)
    EXE('sleep 3', verbose=options.verbosity > 0, dry_run=options.dry_run)

  counter_input = 0
  counter_resubmitted = 0
  counter_toResubmit = 0
  counter_running = 0
  counter_completed = 0

  FILES_INPUT = []

  INPUT_DIRS_2 = []

  for input_dir in INPUT_DIRS:
    for path, subdirs, files in os.walk(input_dir):
      for name in files:
        if os.path.basename(name) == 'condor.sub':
          INPUT_DIRS_2 += [os.path.dirname(os.path.join(path, name))]

  if len(INPUT_DIRS_2) == 0:
    return True

  INPUT_DIRS_2 = sorted(set(INPUT_DIRS_2))

  condor_subfiles = []
  local_exefiles = []
  running_exes = []
  read_running_exes = True

  for inp_dir in INPUT_DIRS_2:

    job_dirs = sorted(glob.glob(inp_dir+'/'+options.jobdirname+'_*/'))
    counter_input += len(job_dirs)

    if (options.proxy is not None) and (len(job_dirs) > 0):
      EXE('cp '+str(options.proxy)+' '+inp_dir+'/X509_USER_PROXY', verbose=options.verbosity > 0, dry_run=options.dry_run)

    dirs_undone = []
    for _tmp in job_dirs:
      if not os.path.isfile(_tmp+'exe.sh'): continue

      if os.path.isfile(_tmp+'flag.done'):
        counter_completed += 1
        for _tmp2 in glob.glob(_tmp+'flag.*'):
          if (_tmp2 != _tmp+'flag.done') and os.path.isfile(_tmp2):
            EXE('rm -f '+_tmp2, verbose=options.verbosity > 0, dry_run=options.dry_run)
      else:
        dirs_undone += [os.path.abspath(_tmp)]

    for _tmp_dirname in dirs_undone:

      if read_running_exes:
        running_exes = HTCondor_jobExecutables(os.environ['USER'])
        read_running_exes = False

      if _tmp_dirname+'/exe.sh' in running_exes:
        counter_running += 1
        if os.path.isfile(_tmp_dirname+'/flag.queue'):
          EXE('rm '+_tmp_dirname+'/flag.queue', verbose=options.verbosity > 0, dry_run=options.dry_run)
        if not os.path.isfile(_tmp_dirname+'/flag.skip'):
          EXE('touch '+_tmp_dirname+'/flag.skip', verbose=options.verbosity > 0, dry_run=options.dry_run)
      elif options.local:
        counter_completed += 1
        local_exefiles = [_tmp_dirname+'/exe.sh']
        for _tmp2 in [_tmp_dirname+'/flag.queue', _tmp_dirname+'/flag.skip']:
          if os.path.isfile(_tmp2):
            EXE('rm -f '+_tmp2, verbose=options.verbosity > 0, dry_run=options.dry_run)
      else:
        resubmit_job = options.resubmit and ((options.max_jobs < 0) or ((len(running_exes) + counter_resubmitted) < options.max_jobs))

        if options.show_resubmitted:
          print colored_text('>> job '+('resubmitted' if resubmit_job else 'to be resubmitted')+' :', ['94']),
          print colored_text(os.path.relpath(_tmp_dirname), ['1', '94'])

        if resubmit_job:
          counter_resubmitted += 1
          if os.path.isfile(_tmp_dirname+'/flag.skip'):
            EXE('rm '+_tmp_dirname+'/flag.skip', verbose=options.verbosity > 0, dry_run=options.dry_run)
          if not os.path.isfile(_tmp_dirname+'/flag.queue'):
            EXE('touch '+_tmp_dirname+'/flag.queue', verbose=options.verbosity > 0, dry_run=options.dry_run)

          if _tmp_dirname+'/../condor.sub' not in condor_subfiles:
            condor_subfiles += [_tmp_dirname+'/../condor.sub']
        else:
          counter_toResubmit += 1
          if options.resubmit:
            if os.path.isfile(_tmp_dirname+'/flag.queue'):
              EXE('rm '+_tmp_dirname+'/flag.queue', verbose=options.verbosity > 0, dry_run=options.dry_run)
            if not os.path.isfile(_tmp_dirname+'/flag.skip'):
              EXE('touch '+_tmp_dirname+'/flag.skip', verbose=options.verbosity > 0, dry_run=options.dry_run)

  if options.local:
    local_exefiles = sorted(set([os.path.abspath(_tmp) for _tmp in local_exefiles]))
    for _tmp in local_exefiles:
      EXE(_tmp, verbose=options.verbosity > 0, dry_run=options.dry_run)
  else:
    condor_subfiles = sorted(set([os.path.abspath(_tmp) for _tmp in condor_subfiles]))
    condor_submit_optstr = (' '+(' '.join(ADD_OPTIONS)) if (len(ADD_OPTIONS) > 0) else '')
    for _tmp in condor_subfiles:
      if EXE(BATCH_RESUB_EXE+' '+_tmp+condor_submit_optstr, suspend=False, verbose=options.verbosity > 0, dry_run=options.dry_run):
        break

  counter_format = '{:>'+str(1+int(math.log10(counter_input)))+'}' if counter_input > 0 else '{:>1}'

  print ''
  print '-'*51
  print ''
  print ' Number of input  files found : '+colored_text(counter_format.format(counter_input), ['1'])
  print ' Number of output files found : '+colored_text(counter_format.format(counter_completed), ['1', '92'])
  print ' Number of resubmitted jobs   : '+colored_text(counter_format.format(counter_resubmitted), ['1', '94'])
  print ' Number of jobs to resubmit   : '+colored_text(counter_format.format(counter_toResubmit), ['1', '94'])
  print ''
  print ' Number of jobs still running : '+counter_format.format(counter_running)
  print ''
  print '-'*51
  print ''

  return bool(counter_input != counter_completed)

def monitor_slurm(options, log=''):
  if opts.local:
    WARNING(log+'monitor_slurm -- option "local" not supported yet')
    return True

  # input directories
  INPUT_DIRS = []
  for i_opt in options.input_dirs:
    if not os.path.isdir(i_opt):
      if options.verbosity > 0: WARNING(log+'input argument is not a valid directory (will be ignored): '+i_opt)
      continue
    INPUT_DIRS += [os.path.abspath(i_opt)]
  INPUT_DIRS = list(set(INPUT_DIRS))

  if len(INPUT_DIRS) == 0:
    return True

  # batch system
  BATCH_RESUB_EXE = 'sbatch'

  ADD_OPTIONS = []
  if options.resubmit:
    if which(BATCH_RESUB_EXE, permissive=True) is None:
      WARNING(log+'executable for batch-job submission not found (monitoring stopped): '+BATCH_RESUB_EXE)
      return False

    if options.runtime is not None:
      ADD_OPTIONS += ['--time='+str(options.runtime)]
    if options.memory is not None:
      ADD_OPTIONS += ['--mem='+str(options.memory)]

    if len(ADD_OPTIONS) > 0:
      print ' > additional options to "'+BATCH_RESUB_EXE+'":', str(ADD_OPTIONS)

#  # release jobs on hold
#  if options.release:
#    EXE('condor_release '+os.environ['USER'], suspend=False, verbose=options.verbosity > 0, dry_run=options.dry_run)
#    EXE('sleep 3', verbose=options.verbosity > 0, dry_run=options.dry_run)

  counter_input = 0
  counter_resubmitted = 0
  counter_toResubmit = 0
  counter_running = 0
  counter_completed = 0

  FILES_INPUT = []

  INPUT_DIRS_2 = []

  for input_dir in INPUT_DIRS:
    for path, subdirs, files in os.walk(input_dir):
      for name in files:
        if os.path.basename(name) == 'slurm_exe.sh':
          INPUT_DIRS_2 += [os.path.dirname(os.path.join(path, name))]

  if len(INPUT_DIRS_2) == 0:
    return True

  INPUT_DIRS_2 = sorted(set(INPUT_DIRS_2))

  condor_subfiles = []
  local_exefiles = []
  running_exes = []

  for inp_dir in INPUT_DIRS_2:

    job_dirs = sorted(glob.glob(inp_dir+'/'+options.jobdirname+'_*/'))
    counter_input += len(job_dirs)

#    if (options.proxy is not None) and (len(job_dirs) > 0):
#      EXE('cp '+str(options.proxy)+' '+inp_dir+'/X509_USER_PROXY', verbose=options.verbosity > 0, dry_run=options.dry_run)

    tasksUnfinished = []
    for _tmp in job_dirs:
      taskId = _tmp[_tmp.rfind('_')+1:_tmp.rfind('/')]
      if not is_int(taskId): continue

      if os.path.isfile(_tmp+'flag.done'):
        counter_completed += 1
      else:
        tasksUnfinished += [int(taskId)]

    tasksUnfinished = list(set(tasksUnfinished))

    if len(tasksUnfinished) > 0:
      runningJobsDict = slurm_jobExecutables(os.environ['USER'])
      nRunningJobs = len(runningJobsDict.keys())
      runningTasks = [int(_tmp.split('_')[1]) for _tmp in runningJobsDict if runningJobsDict[_tmp].split()[0] == inp_dir+'/slurm_exe.sh']
      runningTasks = list(set(runningTasks))
      counter_running += len(runningTasks)

    tasksCanResubmit = [_tmp for _tmp in tasksUnfinished if _tmp not in runningTasks]
    tasksCanResubmit.sort()

    tasksWillResubmit = []
    for _taskIdNum in tasksCanResubmit:
      resubmit_job = options.resubmit and ((options.max_jobs < 0) or ((nRunningJobs + counter_resubmitted) < options.max_jobs))

      if options.show_resubmitted:
        print colored_text('>> job '+('resubmitted' if resubmit_job else 'to be resubmitted')+' :', ['94']),
        print colored_text(inp_dir+'/slurm_exe.sh (task : {:d})'.format(_taskIdNum), ['1', '94'])

      if resubmit_job:
        tasksWillResubmit.append(_taskIdNum)
        counter_resubmitted += 1
      else:
        counter_toResubmit += 1

    if len(tasksWillResubmit) > 0:
      resub_cmd = BATCH_RESUB_EXE
      resub_cmd += ' --array='+','.join([str(_tmp) for _tmp in tasksWillResubmit])
      if len(ADD_OPTIONS) > 0: resub_cmd += ' '.join(['']+ADD_OPTIONS)
      resub_cmd += ' '+inp_dir+'/slurm_exe.sh'
      if EXE(resub_cmd, suspend=False, verbose=options.verbosity > 0, dry_run=options.dry_run):
        break

  counter_format = '{:>'+str(1+int(math.log10(counter_input)))+'}' if counter_input > 0 else '{:>1}'

  print ''
  print '-'*51
  print ''
  print ' Number of input  files found : '+colored_text(counter_format.format(counter_input), ['1'])
  print ' Number of output files found : '+colored_text(counter_format.format(counter_completed), ['1', '92'])
  print ' Number of resubmitted jobs   : '+colored_text(counter_format.format(counter_resubmitted), ['1', '94'])
  print ' Number of jobs to resubmit   : '+colored_text(counter_format.format(counter_toResubmit), ['1', '94'])
  print ''
  print ' Number of jobs still running : '+counter_format.format(counter_running)
  print ''
  print '-'*51
  print ''

  return bool(counter_input != counter_completed)

#### main
if __name__ == '__main__':
   ### args
   parser = argparse.ArgumentParser(
    prog='./'+os.path.basename(__file__),
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description=__doc__)

   parser.add_argument('-i', '--input-dirs', dest='input_dirs', nargs='+', default=[], required=True,
                       help='list of paths to input directories')

   parser.add_argument('--skip', dest='skip', nargs='+', default=[],
                       help='list of job-ID numbers to be ignored')

   parser.add_argument('-r', '--resubmit', dest='resubmit', action='store_true', default=False,
                       help='enable resubmission of batch jobs')

   parser.add_argument('-j', '--jobdirname', dest='jobdirname', action='store', default='job', required=False,
                       help='prefix of batch-job sub-directories (example: [JOBDIRNAME]_[counter]/)')

   parser.add_argument('-p', '--proxy', dest='proxy', action='store', default=None, required=False,
                       help='path to voms proxy (if specified, will overwrite the file X509_USER_PROXY in every valid submission directory)')

   parser.add_argument('--batch-system', dest='batch_system', action='store', default='auto', choices=['auto', 'htc', 'slurm'],
                       help='keyword to select batch system (default: "auto")"')

   parser.add_argument('--slurm-exe', dest='slurm_exe', action='store', default='slurm_exe.sh',
                       help='basename of SLURM job executable file (default: "slurm_exe.sh")')

   parser.add_argument('--memory', dest='memory', action='store', default=None, required=False,
                       help='argument of HTCondor parameter "RequestMemory"')

   parser.add_argument('--time', dest='runtime', action='store', default=None, required=False,
                       help='argument of HTCondor parameter "+RequestRuntime"')

   parser.add_argument('--jobflavour', dest='jobflavour', action='store', type=str, default=None, required=False,
                       help='argument of HTCondor parameter "+JobFlavour"')

   parser.add_argument('-m', '--max-jobs', dest='max_jobs', action='store', type=int, default=-1,
                       help='maximum number of jobs that can submitted to the batch system')

   parser.add_argument('--repeat', dest='repeat', nargs='?', type=int, const=-1, default=None,
                       help='number of times the monitoring is repeated (enables continuous monitoring; see -f for monitoring frequency); if value is not specified or negative, monitoring stops only when all jobs are completed')

   parser.add_argument('-f', '--frequency', dest='frequency', action='store', type=int, default=3600,
                       help='interval of time in seconds between executions of the monitor (has no effect if --repeat is not specified)')

   parser.add_argument('--release', dest='release', action='store_true', default=False,
                       help='run "condor_release ${USER}" before monitoring, to release jobs in the "HOLD" state')

   parser.add_argument('--show-resubmitted', dest='show_resubmitted', action='store_true', default=False,
                       help='show batch jobs flagged for resubmission')

   parser.add_argument('-l', '--local', dest='local', action='store_true', default=False,
                       help='execute jobs locally')

   parser.add_argument('-d', '--dry-run', dest='dry_run', action='store_true', default=False,
                       help='enable dry-run mode')

   parser.add_argument('-v', '--verbosity', dest='verbosity', nargs='?', type=int, default=0, const=1,
                       help='level of verbosity (default: 0)')

   opts, opts_unknown = parser.parse_known_args()
   ### ----

   log_prx = os.path.basename(__file__)+' -- '

   if len(opts_unknown) > 0:
     KILL(log_prx+'unsupported command-line arguments: '+str(opts_unknown))

   if (opts.memory is not None) and (opts.memory <= 0):
     KILL(log_prx+'invalid (non-positive) value for HTCondor parameter "RequestMemory": '+str(opts.memory))

   if (opts.runtime is not None) and (opts.runtime <= 0):
     KILL(log_prx+'invalid (non-positive) value for HTCondor parameter "+RequestRuntime": '+str(opts.runtime))

   if (opts.proxy is not None) and (not os.path.isfile(opts.proxy)):
     KILL(log_prx+'invalid path to voms proxy: '+str(opts.proxy))

   if opts.batch_system == 'htc':
     try: which('condor_q')
     except: KILL(log_prx+'selected HTCondor batch system, but the executable "condor_q" is not available')
     monitor_func = monitor_HTCondor
   elif opts.batch_system == 'slurm':
     try: which('squeue')
     except: KILL(log_prx+'selected SLURM batch system, but the executable "squeue" is not available')
     monitor_func = monitor_slurm
   else:
     try:
       which('condor_q')
       opts.batch_system = 'htc'
       monitor_func = monitor_HTCondor
     except:
       try:
         which('squeue')
         opts.batch_system = 'slurm'
         monitor_func = monitor_slurm
       except:
         KILL(log_prx+'automatic selection of batch system failed (HTCondor and SLURM are both unavailable)')

   if opts.repeat != 0:
     if opts.repeat is not None:
       n_reps = 0
       SLEEP_CMD = 'sleep '+str(opts.frequency)
     while monitor_func(options=opts, log=log_prx):
       if opts.repeat is None: break
       n_reps += 1
       if (opts.repeat >= 0) and (n_reps == opts.repeat): break
       EXE(SLEEP_CMD, verbose=opts.verbosity > 0, dry_run=opts.dry_run)
